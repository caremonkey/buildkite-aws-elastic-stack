## Provides the infrastructure for a scalable buildkite cluster

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Buildkite Configuration
        Parameters:
        - BuildkiteAgentRelease
        - BuildkiteAgentToken
        - BuildkiteOrgSlug
        - BuildkiteQueue
        - BuildkiteApiAccessToken
        - BuildkiteAgentsPerInstance

      - Label:
          default: Network Configuration
        Parameters:
        - VpcId
        - Subnets
        - AvailabilityZones
        - SecurityGroupId

      - Label:
          default: Instance Configuration
        Parameters:
        - ImageId
        - InstanceType
        - KeyName
        - SpotPrice
        - SecretsBucket
        - ArtifactsBucket
        - AuthorizedUsersUrl
        - RootVolumeSize
        - RootVolumeIops

      - Label:
          default: Auto-scaling Configuration
        Parameters:
        - MinSize
        - MaxSize
        - ScaleUpAdjustment
        - ScaleDownAdjustment
        - AutoscaleStrategy

Parameters:
  KeyName:
    Description: The ssh keypair used to access the buildkite instances
    Type: AWS::EC2::KeyPair::KeyName

  BuildkiteOrgSlug:
    Description: Your Buildkite organization's slug
    Type: String

  BuildkiteAgentRelease:
    Description: The buildkite-agent release stream ("stable", "unstable" or "experimental")
    Type: String
    Default: "stable"

  BuildkiteAgentToken:
    Description: Your Buildkite organization's agent token
    Type: String
    NoEcho: true

  BuildkiteApiAccessToken:
    Description: Optional - A Buildkite API access token (with read_pipelines, read_builds and read_agents) used for gathering metrics
    Type: String
    NoEcho: true

  BuildkiteQueue:
    Description: Name of the Buildkite agent queue that agents will use
    Type: String
    Default: elastic

  BuildkiteAgentsPerInstance:
    Description: The number of Buildkite agents to run on each instance
    Type: Number
    Default: 1

  SecretsBucket:
    Description: Optional - name of an S3 bucket containing provisioning files
    Type: String
    Default: ""

  ArtifactsBucket:
    Description: Optional - name of an S3 bucket for build artifact storage
    Type: String
    Default: ""

  AuthorizedUsersUrl:
    Description: Optional - An url to periodically download ssh authorized_keys from
    Type: String
    Default: ""

  VpcId:
    Type: String
    Description: Optional - VPC Id of existing VPC. Leave blank to have a new VPC created
    Default: ""

  Subnets:
    Type: CommaDelimitedList
    Description: Optional - Comma separated list of three existing VPC Subnet Ids where ECS instances will run.  Required if setting VpcId.
    Default: ""

  AvailabilityZones:
    Type: CommaDelimitedList
    Description: Optional - Comma-delimited list of VPC availability zones in which to create subnets. Required if setting VpcId.
    Default: ""

  InstanceType:
    Description: The type of instance to use for the agent
    Type: String
    Default: t2.nano

  SpotPrice:
    Description: Optional - Spot price to use for the agents. 0 means normal (non-spot) instances are used
    Type: String
    Default: 0

  MaxSize:
    Description: The maximum number of agents to launch
    Type: Number
    Default: 10

  MinSize:
    Description: The minumum number of agents to launch
    Type: Number
    Default: 0

  ScaleUpAdjustment:
    Description: The number of agents to adjust by on each scale up event (ScheduledJobsCount > 0 for 1 minute)
    Type: Number
    Default: 5

  ScaleDownAdjustment:
    Description: The number of agents to remove on each scale down event (BusyAgentCount == 0 for the last 6 minutes, every 2 minutes)
    Type: Number
    Default: -1

  RootVolumeSize:
    Description: Size of EBS volume for root filesystem in GB.
    Type: Number
    Default: 250

  RootVolumeIops:
    Description: Provisioned IOPS for the root volume. You get 3 free for each GB
    Type: Number
    Default: 750

  SecurityGroupId:
    Type: String
    Description: Optional - Existing security group to associate the container instances. Creates one by default.
    Default: ""

  ImageId:
    Type: String
    Description: Optional - The AMI to use, otherwise uses the mapping built in
    Default: ""

Conditions:
    UseSpotInstances:
      !Not [ !Equals [ $(SpotPrice), 0 ] ]

    CreateVpcResources:
      !Equals [ $(VpcId), "" ]

    CreateSecurityGroup:
      !Equals [ $(SecurityGroupId), "" ]

    UseSpecifiedAvailabilityZones:
      !Not [ !Equals [ !Join [ "", $(AvailabilityZones) ], "" ]  ]

    UseSecretsBucket:
      !Not [ !Equals [ $(SecretsBucket), "" ] ]

    UseArtifactsBucket:
      !Not [ !Equals [ $(ArtifactsBucket), "" ] ]

    UseDefaultAMI:
      !Equals [ $(ImageId), "" ]

    CreateMetricsStack:
      !Not [ !Equals [ $(BuildkiteApiAccessToken), "" ] ]

Outputs:
  AgentAutoScaleTopic:
    Value: $(AgentAutoScaleTopic)

  AgentAutoScaleTopicName:
    Value: $(AgentAutoScaleTopic[TopicName])

Resources:
  # Allow ec2 instances to assume a role and be granted the IAMPolicies
  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ $(IAMRole) ]

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ec2.amazonaws.com ]
            Action: sts:AssumeRole
      Path: /

  IAMPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: InstancePolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricData
              - cloudformation:DescribeStackResource
              - ec2:DescribeTags
              - autoscaling:CompleteLifecycleAction
              - autoscaling:RecordLifecycleActionHeartbeat
              - ecr:GetAuthorizationToken
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchCheckLayerAvailability
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
              - ecr:PutImage

            Resource: "*"
          - Effect: Allow
            Action:
              - sqs:*
            Resource: $(AgentLifecycleQueue[Arn])
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource:
              - "arn:aws:logs:*:*:*"

      Roles:
        - $(IAMRole)

  SecretsBucketPolicies:
    Type: AWS::IAM::Policy
    Condition: UseSecretsBucket
    Properties:
      PolicyName: SecretsBucketPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:Get*
              - s3:Get
              - s3:List*
            Resource:
              - "arn:aws:s3:::$(SecretsBucket)/*"
              - "arn:aws:s3:::$(SecretsBucket)"
      Roles:
        - $(IAMRole)

  ArtifactsBucketPolicies:
    Type: AWS::IAM::Policy
    Condition: UseArtifactsBucket
    Properties:
      PolicyName: ArtifactsBucketPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:Put*
              - s3:List*
            Resource:
              - "arn:aws:s3:::$(ArtifactsBucket)/*"
              - "arn:aws:s3:::$(ArtifactsBucket)"
      Roles:
        - $(IAMRole)

  AgentLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      SecurityGroups: [ !If [ "CreateSecurityGroup", $(SecurityGroup), $(SecurityGroupId) ] ]
      KeyName : $(KeyName)
      IamInstanceProfile: $(IAMInstanceProfile)
      InstanceType: $(InstanceType)
      SpotPrice: !If [ "UseSpotInstances", $(SpotPrice), '$(AWS::NoValue)' ]
      ImageId : !If [
        "UseDefaultAMI",
        "$(AWSRegion2AMI[$(AWS::Region)][AMI])",
        $(ImageId)
      ]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs: { VolumeSize: $(RootVolumeSize), VolumeType: gp2, Iops: $(RootVolumeIops) }
      UserData: !Base64 |
        #!/bin/bash -xv
        /opt/aws/bin/cfn-init -s $(AWS::StackId) -r AgentLaunchConfiguration --region $(AWS::Region)
        /opt/aws/bin/cfn-signal -e \$? -r 'cfn-init finished' \
          --stack $(AWS::StackName) --resource 'AgentAutoScaleGroup' --region $(AWS::Region)

    Metadata:
      # see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html
      AWS::CloudFormation::Init:
        config:
          commands:
            01-write-buildkite-env:
              command: |
                #!/bin/bash -eu

                cat << EOF > /var/lib/buildkite-agent/cfn-env
                BUILDKITE_STACK_NAME=$(AWS::StackName)
                BUILDKITE_SECRETS_BUCKET=$(SecretsBucket)
                BUILDKITE_AGENTS_PER_INSTANCE=$(BuildkiteAgentsPerInstance)
                EOF

                chown buildkite-agent: /var/lib/buildkite-agent/cfn-env
            01-write-lifecycled-config:
              command: |
                #!/bin/bash -eu

                cat << EOF > /etc/lifecycled
                AWS_REGION=$(AWS::Region)
                LIFECYCLED_DEBUG=true
                LIFECYCLED_QUEUE=$(AgentLifecycleQueue)
                LIFECYCLED_INSTANCEID=\$(/opt/aws/bin/ec2-metadata --instance-id | cut -d " " -f 2)
                LIFECYCLED_HANDLER=/usr/bin/buildkite-agent-lifecycled-handler
                EOF

                start lifecycled
            02-install-buildkite:
              command: |
                #!/bin/bash -eu

                # Choose the right binary

                ln -s /usr/bin/buildkite-agent-$(BuildkiteAgentRelease) /usr/bin/buildkite-agent

                # Setup the buildkite-agent config

                INSTANCE_ID=\$(/opt/aws/bin/ec2-metadata --instance-id | cut -d " " -f 2)
                DOCKER_VERSION=\$(docker --version | cut -f3 -d' ' | sed 's/,//')

                # Once 3.0 is stable we can just remove this and let the agent do the right thing
                if [[ "$(BuildkiteAgentRelease)" == "stable" ]]; then
                  BOOTSTRAP_SCRIPT="/etc/buildkite-agent/bootstrap.sh"
                else
                  BOOTSTRAP_SCRIPT="buildkite-agent bootstrap"
                fi;

                cat << EOF > /etc/buildkite-agent/buildkite-agent.cfg
                name="$(AWS::StackName)-\$INSTANCE_ID-%n"
                token="$(BuildkiteAgentToken)"
                meta-data=\$(printf 'queue=%s,docker=%s,stack=%s,buildkite-aws-stack' "$(BuildkiteQueue)" "\$DOCKER_VERSION" "$(AWS::StackName)")
                meta-data-ec2=true
                bootstrap-script="\$BOOTSTRAP_SCRIPT"
                hooks-path=/etc/buildkite-agent/hooks
                build-path=/var/lib/buildkite-agent/builds
                plugins-path=/var/lib/buildkite-agent/plugins
                EOF

                chown buildkite-agent: /etc/buildkite-agent/buildkite-agent.cfg

                # Setup logging first so we capture everything

                mkdir -p /var/awslogs/etc/config/

                for i in \$(seq 1 $(BuildkiteAgentsPerInstance)); do
                  touch /var/log/buildkite-agent-\${i}.log

                  cat << EOF > /var/awslogs/etc/config/buildkite-agent-\${i}
                [/var/log/buildkite-agent-\${i}.log]
                file = /var/log/buildkite-agent-\${i}.log
                log_group_name = /var/log/buildkite-agent.log
                log_stream_name = {instance_id}-\${i}
                datetime_format = %Y-%m-%d %H:%M:%S
                EOF
                done

                service awslogs restart

                # Setup and start services

                for i in \$(seq 1 $(BuildkiteAgentsPerInstance)); do
                  cp /etc/buildkite-agent/init.d.tmpl /etc/init.d/buildkite-agent-\${i}
                  service buildkite-agent-\${i} start
                  chkconfig --add buildkite-agent-\${i}
                done

            03-fetch-authorized-users:
              test: test -n "$(AuthorizedUsersUrl)"
              command: |
                #!/bin/bash -eu

                cat << EOF > /etc/cron.hourly/authorized_keys
                curl --silent -f "$(AuthorizedUsersUrl)" > /tmp/authorized_keys
                mv /tmp/authorized_keys /home/ec2-user/.ssh/authorized_keys
                chmod 600 /home/ec2-user/.ssh/authorized_keys
                chown ec2-user: /home/ec2-user/.ssh/authorized_keys
                EOF

                chmod +x /etc/cron.hourly/authorized_keys

                /etc/cron.hourly/authorized_keys

  AgentLifecycleQueue:
    Type: AWS::SQS::Queue

  AgentLifecycleHookRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ autoscaling.amazonaws.com ]
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AgentLifecyclePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sqs:*
                Resource: $(AgentLifecycleQueue[Arn])
      Path: /

  AgentLifecycleHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: $(AgentAutoScaleGroup)
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      NotificationTargetARN: $(AgentLifecycleQueue[Arn])
      RoleARN: $(AgentLifecycleHookRole[Arn])

  AgentAutoScaleTopic:
    Type: AWS::SNS::Topic

  AgentAutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !If [
        "CreateVpcResources",
        [ $(Subnet0), $(Subnet1), $(Subnet2) ],
        $(Subnets)
      ]
      LaunchConfigurationName: $(AgentLaunchConfiguration)
      MinSize: $(MinSize)
      MaxSize: $(MaxSize)
      NotificationConfigurations:
        - TopicARN: $(AgentAutoScaleTopic)
          NotificationTypes:
            - "autoscaling:EC2_INSTANCE_LAUNCH"
            - "autoscaling:EC2_INSTANCE_LAUNCH_ERROR"
            - "autoscaling:EC2_INSTANCE_TERMINATE"
            - "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
      MetricsCollection:
        - Granularity: 1Minute
          Metrics:
            - GroupMinSize
            - GroupMaxSize
            - GroupInServiceInstances
            - GroupTerminatingInstances
            - GroupPendingInstances
      Tags:
        - Key: Role
          Value: buildkite-agent
          PropagateAtLaunch: true

    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
        Count: $(MinSize)
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: $(MinSize)
        MaxBatchSize: 5
        PauseTime: PT15M
        WaitOnResourceSignals: true

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateSecurityGroup
    Properties:
      GroupDescription: Enable access to SSH
      VpcId: !If [ "CreateVpcResources", $(Vpc), $(VpcId) ]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
